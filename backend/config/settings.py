"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from corsheaders.defaults import default_headers
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1y7x2==2mc6e3v%ly+of)nvqwj3**%&-+&!u3*z#v3%&4er92q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]  # for development purposes

REST_FRAMEWORK = {
	# 'DEFAULT_RENDERER_CLASSES': (
	#     'rest_framework.renderers.JSONRenderer',
	#     'rest_framework.renderers.BrowsableAPIRenderer',  # This enables the browsable API
	# ),
	'DEFAULT_AUTHENTICATION_CLASSES': [
		'rest_framework_simplejwt.authentication.JWTAuthentication',
	],
	'DEFAULT_PERMISSION_CLASSES': [
		'rest_framework.permissions.IsAuthenticated',
	],
	'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SIMPLE_JWT = {
	"ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
	"REFRESH_TOKEN_LIFETIME": timedelta(days=1),
	'ROTATE_REFRESH_TOKENS': True,
	'BLACKLIST_AFTER_ROTATION': True,
	'AUTH_HEADER_TYPES': ('Bearer',),
}

AUTH_USER_MODEL = 'authentication.AuthUser'

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	# third party apps
	'rest_framework',
	'rest_framework_simplejwt',
	'rest_framework_simplejwt.token_blacklist',
	'corsheaders',
	'drf_spectacular',
	# local apps
	'apps.authentication',
	'apps.users',
	'apps.campaigns',
	'apps.investments',
	'apps.notifications',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



# # TODO: get from .env file
# # for PRODUCTION (server)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'fundflow',
#         'USER': 'doko',
#         'PASSWORD': 'pdoko53',
#         'HOST': 'localhost',
#     }
# }

# for DEVELOPMENT (local)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'fundflow',
        'USER': 'doko',
        'PASSWORD': 'user53',
        'HOST': 'localhost',
    }
}

# DATABASES = {
# 	'default': {
# 		'ENGINE': 'django.db.backends.sqlite3',
# 		'NAME': BASE_DIR / 'db.sqlite3',
# 	}
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (Uploaded by users)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True  # Ensure this is set
CORS_ALLOW_ALL_ORIGINS = True  # For development; in production, restrict this to specific origins
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOWED_ORIGINS = [
	'http://localhost:5173',  # Add your frontend's URL
	'https://5f54-31-148-166-245.ngrok-free.app',  # Ngrok URL
	"http://localhost:8000",
	# "http://127.0.0.1:8000",
	# 'http://127.0.0.1:5173/'
	# 'null',
]

# Allow all methods and headers (similar to FastAPI config)
CORS_ALLOW_METHODS = [
	"DELETE",
	"GET",
	"OPTIONS",
	"PATCH",
	"POST",
	"PUT",
]

CORS_ALLOW_HEADERS = [
						 'Access-Control-Allow-Origin'
						 "default_headers"
						 "accept",
						 "accept-encoding",
						 "authorization",
						 "content-type",
						 "dnt",
						 "origin",
						 "user-agent",
						 "x-csrftoken",
						 "x-requested-with",
						 'content-disposition', 'accept-encoding',
						 'content-type', 'accept', 'origin', 'Authorization',
						 'access-control-allow-methods'
]


CSRF_TRUSTED_ORIGINS = [
	'http://localhost:5173',
	"http://localhost:8000",
	'https://5f54-31-148-166-245.ngrok-free.app',
]

# CSRF_TRUSTED_ORIGINS = [
#     'https://5f54-31-148-166-245.ngrok-free.app ',
#     'http://localhost:3000',
#     'http://localhost:5173'
# ]

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'handlers': {
		'console': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
		},
	},
	'root': {
		'handlers': ['console'],
		'level': 'DEBUG',
	},
}
